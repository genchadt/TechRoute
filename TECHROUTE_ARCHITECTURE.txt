# TechRoute Architecture Documentation

## Overview
TechRoute is a network discovery and monitoring tool that:
- Discovers devices on the local network
- Checks TCP/UDP service availability
- Provides a GUI for monitoring status

## Core Components

### 1. Controller (techroute/controller.py)
Main application coordinator that:
- Manages network discovery processes
- Handles configuration
- Coordinates between UI and backend services

Key Functions:
- `__init__()` - Initializes all components
- `process_queue()` - Handles status updates
- `start_ping_process()` - Starts network scanning
- `launch_web_ui_for_port()` - Opens web interfaces

### 2. Network Discovery (techroute/network/)
#### discovery.py
- Discovers local network information
- Gets IP addresses, subnet masks, gateways
- Uses both system tools (ip/ifconfig) and psutil

Key Functions:
- `get_network_info()` - Main interface for network info
- `_get_network_info_linux()` - Linux-specific implementation

#### ping.py
- Performs actual ping and port checks
- Runs in worker threads

Key Functions:
- `ping_worker()` - Main worker function
- `_check_port()` - Checks TCP port status
- `_parse_latency()` - Extracts ping times

### 3. Service Checkers (techroute/checkers/)
#### base.py
- Defines base interfaces for service checking
- Provides common UDP helper functions

Key Components:
- `CheckResult` dataclass - Standard result format
- `ServiceCheckManager` - Coordinates parallel checks

#### Protocol Checkers (mdns.py, slp.py, etc.)
- Implement protocol-specific discovery
- All follow BaseChecker interface

### 4. UI Components (techroute/ui/)
#### app_ui.py
- Main application window, composed from mixins (`MenuMixin`, `DialogsMixin`, `AnimationsMixin`, `StatusViewMixin`).
- Strictly implements the `AppUIProtocol`, providing a clean, public API for the controller to interact with the UI. This decouples the controller from the specific UI implementation (Tkinter).
- Delegates UI logic to specialized mixins and child widgets.
- Handles theme/language settings and orchestrates the main UI layout.

Key Public Methods (from `AppUIProtocol`):
- `toggle_ping_process()`: Starts or stops the network scanning process.
- `stop_ping_process()`: Halts any active scanning.
- `add_target_row()`: Adds a new target to the status display.

#### status_view.py
- A mixin (`StatusViewMixin`) that provides the logic for rendering the list of targets and their statuses.
- Implements the `add_target_row` and `update_target_row` methods as defined in the `AppUIProtocol`.
- Manages the creation, update, and styling of all widgets for each monitored target.

Key Functions:
- `update_target_row()` - Updates the UI for a specific target.
- `add_target_row()` - Creates the initial set of widgets for a new target.

#### types.py
- Contains shared UI-related typing information.
- Defines `AppUIProtocol`, a formal interface that UI mixins and components rely on to interact with the main `AppUI` class. This is critical for ensuring components are implemented correctly.

#### widgets/
- A directory for reusable, self-contained UI widgets.
- `StatusBar`: The bar at the bottom of the window for status messages and the animated activity indicator.
- `NetworkInfoPanel`: Displays local network information like IP address and gateway.
- `TargetInputPanel`: Contains the text area for target input and primary action buttons like "Start Pinging".

### 5. Configuration (techroute/configuration.py)
- Manages application settings
- Handles config file loading/saving

Key Functions:
- `load_or_create_config()` - Main config loader
- `save_config()` - Saves changes

## Data Flow
1. User initiates scan via UI
2. Controller creates ping workers
3. Workers perform checks and queue results
4. Controller processes queue and updates UI
5. UI renders status changes

## UI Initialization Flow
1. `MainApp` initializes the `TechRouteController`.
2. `MainApp` initializes the `AppUI`.
3. `MainApp` creates the `ControllerCallbacks` object, which contains references to the UI's methods.
4. `MainApp` calls `self.controller.register_callbacks(callbacks)`, which initializes the `PingManager`.
5. `AppUI` completes its initialization and calls the `on_ui_ready` callback.
6. The `on_ui_ready` callback, implemented in `MainApp`, calls the `_initial_ui_load` method.
7. `_initial_ui_load` can then safely perform any actions that require both the UI and the controller to be fully initialized.

## Key Data Structures
- `target_info` dict - Contains all status info for a target
- `port_statuses` dict - Maps ports to status ("Open"/"Closed")
- `udp_service_statuses` dict - Maps service names to status

## Important Patterns
- Observer pattern for status updates
- Worker thread pattern for parallel checks
- Protocol interface pattern for service checkers
